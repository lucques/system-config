#!/usr/bin/env python3

import os
from pathlib import Path
import argparse


#########
# Usage #
#########

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 description='''
    Update the lockfile of a home-manager config flake, then activate the hm-config.

    The `--private` mode searches the given hm-config in the private repo and includes private components. The repo must sit in the same parent dir as this repo.
    1. `some-path/system-config`
    2. `some-path/system-config-priv`
    If repo 2. is missing, then a warning is issued.
''')
parser.add_argument('hm_config', nargs=1)
parser.add_argument('--private', action='store_true')


#########
# Setup #
#########

args = parser.parse_args()

# Local paths
path_parent             = Path(os.path.realpath(__file__)).parent.parent.parent
path_global_config      = path_parent / 'system-config'      / 'nix' / 'global-config'

path_pub                = path_parent / 'system-config'      / 'nix'
path_pub_flakes         = path_parent / 'system-config'      / 'nix' / 'flakes'
path_pub_hm_configs     = path_parent / 'system-config'      / 'nix' / 'hm-configs'
path_pub_hm_components  = path_parent / 'system-config'      / 'nix' / 'hm-components'

path_priv               = path_parent / 'system-config-priv' / 'nix'
path_priv_flakes        = path_parent / 'system-config-priv' / 'nix' / 'flakes'
path_priv_hm_configs    = path_parent / 'system-config-priv' / 'nix' / 'hm-configs'
path_priv_hm_components = path_parent / 'system-config-priv' / 'nix' / 'hm-components'

# Determine hm-config
hm_config = args.hm_config[0]

path_hm_config = None
if args.private:
    path = path_priv_hm_configs / hm_config
    assert path.exists(), f'hm-config `{path}` does not exist'
    path_hm_config = path
else:
    path = path_pub_hm_configs / hm_config
    assert path.exists(), f'hm-config `{path}` does not exist'
    path_hm_config = path


#######################################
# Determine inputs and build lockfile #
#######################################

nixargs = []

# Add global config flake
nixargs.append(f'--override-input global-config path:{path_global_config}')

# Add public flakes
for flake in path_pub_flakes.iterdir():
    if flake.is_dir():
        nixargs.append(f'--override-input global-config/{flake.name} path:{flake}')

# Add public hm-components
nixargs.append(f'--override-input global-config/hm-components-pub path:{path_pub_hm_components}')

# Add private components
if args.private:
    # Check that `system-config-priv` dir exists
    assert path_priv_flakes.exists(),        f'WARNING: {path_priv_flakes} does not exist'
    assert path_priv_hm_components.exists(), f'WARNING: {path_priv_hm_components} does not exist'

    # Add private flakes
    for flake in path_priv_flakes.iterdir():
        if flake.is_dir():
            nixargs.append(f'--override-input global-config/{flake.name} path:{flake}')

    # Add private hm-components
    nixargs.append(f'--override-input global-config/hm-components-priv path:{path_priv_hm_components}')


# Peform update
cmd = f'nix flake update --flake {path_hm_config} {" ".join(nixargs)}'
print(cmd)
os.system(cmd)


############
# Activate #
############

cmd = f'home-manager switch --flake {path_hm_config}#{hm_config}'
print(cmd)
os.system(cmd)