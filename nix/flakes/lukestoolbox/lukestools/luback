#!/usr/bin/env lukespython3

import os
import time
import fire
import yaml
from pathlib import Path


PATH_CONFIG_DEFAULT  = '~/.config/luback/config.yaml'
DUPLICITY_OPTIONS    = '--rsync-options=\"--recursive --links --times --devices --specials --verbose --rsh ssh\"'


class Luback:
    """
    Simple backup and restore tool; uses duplicity and rsync to connect to a remote location.
    
    The configuration file is expected to be located at `~/.config/luback/config.yaml`. The file should look like this:

    ```
    ---
    log_path: /home/x/backup.log

    remote_rsync_user: the-user     # Used for backupping files to remote
    remote_rsync_host: example.com
    remote_sftp_user: the-user      # Used for creating dirs on remote
    remote_sftp_host: example.com
    remote_basepath: /users/the-user/backups

    passphrase_command: "echo the-passphrase"

    targets:
        # Personal documents
        docs:
            src: /home/x/docs
            dst: docs

        # Work stuff
        docs:
            src: /home/x/work
            dst: work
        
        # ...
    ```
    """


    ##########
    # Backup #
    ##########

    @staticmethod
    def backup(*targets, config_path=PATH_CONFIG_DEFAULT, verbose=False):
        """
        Save targets to a remote location.
        """

        ####################
        # Load config file #
        ####################

        config_path = Path(os.path.expanduser(config_path))

        config = None
        with open(config_path, 'r') as file:
            config = yaml.safe_load(file)

        log_path = None
        if 'log_path' in config:      
            log_path = Path(config['log_path'])
            log_path.touch(exist_ok=True)


        ##########
        # Backup #
        ##########

        for target in targets:            
            path_src = config['targets'][target]['src']
            path_dst = config['targets'][target]['dst']


            #########################
            # Create dirs on remote #
            #########################

            print('Creating dirs on remote host...', flush=True)

            # Kind of hacky, but this works: https://stackoverflow.com/questions/27420116/how-to-create-directory-if-doesnt-exists-in-sftp
            dirs = path_dst.split('/')
            sftp_command = '{\n'
            for i in range(0, len(dirs)):
                sftp_command += f'  echo -mkdir {config["remote_basepath"]}/{"/".join(dirs[:i+1])} \n'
            sftp_command += '}'

            cmd = f'{sftp_command} | sftp -b - {config["remote_sftp_user"]}@{config["remote_sftp_host"]}'
            print(cmd)
            exit_status = os.system(cmd)
            assert (exit_status >> 8) == 0


            print(flush=True)


            ##################
            # Perform backup #
            ##################

            print('Performing backup...', flush=True)

            cmd = f'PASSPHRASE=$({config["passphrase_command"]}) duplicity backup "{path_src}" "rsync://{config["remote_rsync_user"]}@{config["remote_rsync_host"]}:{config["remote_basepath"]}/{path_dst}" {DUPLICITY_OPTIONS}{" --verbosity 8" if verbose else ""}'
            
            log_start = time.strftime('%Y-%m-%d.%H-%M-%S') + '  START: ' + cmd
            if log_path:
                with open(log_path, 'a') as f: f.write(log_start + '\n')
            print(log_start, flush=True)

            exit_status = os.system(cmd)
            assert (exit_status >> 8) == 0

            log_end = time.strftime('%Y-%m-%d.%H-%M-%S') + '  END:   ' + cmd
            if log_path:
                with open(log_path, 'a') as f: f.write(log_end + '\n')
            print(log_end, flush=True)



    ###########
    # Restore #
    ###########

    @staticmethod
    def restore(target, path_config=PATH_CONFIG_DEFAULT, verbose=False):
        """
        Restore a target from a remote location.
        """

        ####################
        # Load config file #
        ####################

        path_config = Path(os.path.expanduser(path_config))

        config = None
        with open(path_config, 'r') as file:
            config = yaml.safe_load(file)


        ###################
        # Perform restore #
        ###################

        path_src = config['targets'][target]['src']
        path_dst = config['targets'][target]['dst']

        cmd = f'PASSPHRASE=$({config["passphrase_command"]}) duplicity restore "rsync://{config["remote_rsync_user"]}@{config["remote_rsync_host"]}:{config["remote_basepath"]}/{path_dst}" "{path_src}" {DUPLICITY_OPTIONS}{" --verbosity 8" if verbose else ""}'
        print(cmd, flush=True)
        exit_status = os.system(cmd)
        assert (exit_status >> 8) == 0


########
# Main #
########
    
if __name__ == '__main__':
    fire.Fire(Luback)